version: '3.7'

services:
  app_1:
    container_name: app1
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "8000:8000"
    command: python manage.py runserver 0.0.0.0:8000
    networks:
      - monitor-net

  app_2:
    container_name: app2
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "8001:8001"
    command: python manage.py runserver 0.0.0.0:8001
    networks:
      - monitor-net

  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus/:/etc/prometheus/
  #   ports:
  #     - "9090:9090"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - 9090:9090
    expose:
      - 9090
    networks:
      - monitor-net
    depends_on:
      - cadvisor

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    ports:
      - 9093:9093
    expose:
      - 9093
    networks:
      - monitor-net

  nodeexporter:
    image: prom/node-exporter
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - 9100:9100
    expose:
      - 9100
    networks:
      - monitor-net

  cadvisor:
    image: google/cadvisor
    # image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    ports:
      - 8080:8080
    expose:
      - 8080
    networks:
      - monitor-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      # - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      # - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=mypassword
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      - monitor-net
    depends_on:
      - prometheus
      - cadvisor

  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: unless-stopped
    ports:
      - 9091:9091
    expose:
      - 9091
    networks:
      - monitor-net


networks:
  monitor-net:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
